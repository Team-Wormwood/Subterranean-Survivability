{
	"format_version": "1.16.0",
	"minecraft:attachable": {
		"description": {
			"identifier": "yana:hunting_rifle",
			"materials": {
				"default": "armor",
				"enchanted": "armor_enchanted"
			},
			"textures": {
				"default": "textures/models/misc/hunting_rifle",
				"enchanted": "textures/misc/enchanted_item_glint"
			},
			"geometry": {
				"default": "geometry.hunting_rifle"
			},
			"animations": {
				"shoot": "animation.hunting_rifle.shoot"
			},
			"scripts": {
				"parent_setup": "variable.chest_layer_visible = 0.0;",
				"animate": [
					{
						"shoot": "query.is_using_item > 0.0f"
					}
				]
			},
			"render_controllers": [
				"controller.render.armor"
			]
		}
	}
}
{
    "format_version": "1.16.0",
    "minecraft:attachable": {
        "description": {
            "identifier": "yana:hunting_rifle",
            "materials": {
                "default": "entity_alphatest",
				//this is needed because we are using the item_default render controller
				//this would also be useable if were overriding an echantable item
                "enchanted": "entity_alphatest_glint"
            },
            "textures": {
                "default": "textures/blocks/<your_texture>", //full path to your texture
                "enchanted": "textures/misc/enchanted_item_glint"
            },
            "geometry": {
                "default": "geometry.<your_item>" //same geometry as specified in the block definition
            },
            "scripts": {
                "pre_animation": [
		    		//define a variable to check when our item is in the main hand via the context variable of the attachable
                    "v.main_hand = c.item_slot == 'main_hand';",
		    		//define a variable to check when our item is in the off hand via the context variable of the attachable
                    "v.off_hand = c.item_slot == 'off_hand';",
		    		//define a variable to check when our item is in the head slot via the context variable of the attachable
                    "v.head = c.item_slot == 'head';"
		    	//in theory, you could obviously apply this to any slot
		    	//I've chosen these because they are what java displays 3D items in
                ],
                "animate": [
		    		//thirdperson_main_hand pseudo display setting defined when we're in the main hand slot but not first person
                    {"thirdperson_main_hand": "v.main_hand && !c.is_first_person"},
		    		//thirdperson_off_hand pseudo display setting defined when we're in the off hand slot but not first person
                    {"thirdperson_off_hand": "v.off_hand && !c.is_first_person"},
		    		//thirdperson_head pseudo display setting defined when we're in the head slot hand but not first person
                    {"thirdperson_head": "v.head && !c.is_first_person"},
		    		//firstperson_main_hand pseudo display setting defined when we're in the main hand slot slot hand and are first person
                    {"firstperson_main_hand": "v.main_hand && c.is_first_person"},
		    		//firstperson_off_hand pseudo display setting defined when we're in the off hand slot hand and are first person
                    {"firstperson_off_hand": "v.off_hand && c.is_first_person"},
		    		//firstperson_off_hand pseudo display setting defined when we're in the head hand slot hand and are first person
                    {"firstperson_head": "c.is_first_person && v.head"}
                ]
            },
            "animations": {
                "thirdperson_main_hand": "animation.<your_item>.thirdperson_main_hand",
                "thirdperson_off_hand": "animation.<your_item>.thirdperson_off_hand",
                "thirdperson_head": "animation.<your_item>.head",
                "firstperson_main_hand": "animation.<your_item>.firstperson_main_hand",
                "firstperson_off_hand": "animation.<your_item>.firstperson_off_hand",
				//animation to disable our attachable in the first person, as not to obstruct player view
				//I attempted this via render controller, but I couldn't seem to get the render controller to acknowledge the attachable variables
                "firstperson_head": "animation.disable"
            },
            "render_controllers": [
	        	//we'll use the same render controller as the trident here, but you could define your own if you'd like
                "controller.render.item_default"
            ]
        }
    }
}